repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'
if = "has('nvim')"
hook_add = '''
    nnoremap <silent> <Space>r  :Denite file_mru<CR>
    nnoremap <silent> <Space>b  :Denite buffer<CR>
    nnoremap <silent> <Space>B  :Denite bookmark<CR>
    nnoremap <silent> <Space>c :<C-u>Denite command_history -split=floating<CR>
    autocmd FileType denite call s:denite_my_settings()
    function! s:denite_my_settings() abort
        nnoremap <silent><buffer><expr> <CR>   denite#do_map('do_action')
        nnoremap <silent><buffer><expr> l      denite#do_map('do_action')
        nnoremap <silent><buffer><expr> h      denite#do_map('do_action', 'split')
        nnoremap <silent><buffer><expr> v      denite#do_map('do_action', 'vsplit')
        nnoremap <silent><buffer><expr> <Esc>  denite#do_map('quit')
        nnoremap <silent><buffer><expr> q      denite#do_map('quit')
        nnoremap <silent><buffer><expr> i      denite#do_map('open_filter_buffer')
    endfunction
'''

[[plugins]]
repo = 'Shougo/defx.nvim'
if = "has('nvim')"
depends = 'denite.nvim'
hook_add = '''
    nnoremap <silent> <Space>f :<C-u>Defx -listed -resume -buffer-name=tab`tabpagenr()`<CR>
    nnoremap <silent> <Space>h :<C-u>Defx<CR>
    "call defx#custom#option('_', {
    "\   'columns': 'indent:git:icons:filename',
    "\})
    let g:defx_icons_enable_syntax_highlight = 1
    let g:defx_icons_column_length = 2
    autocmd FileType defx call s:defx_my_setting()
    function! s:defx_my_setting() abort
        nnoremap <silent><buffer><expr> ~    defx#do_action('cd')
        nnoremap <silent><buffer><expr> .    defx#do_action('toggle_ignored_files')
        nnoremap <silent><buffer><expr> q    defx#do_action('quit')
        nnoremap <silent><buffer><expr> r    defx#do_action('rename')
        nnoremap <silent><buffer><expr> l    defx#do_action('open')
        nnoremap <silent><buffer><expr> <CR> defx#do_action('open')
        nnoremap <silent><buffer><expr> h    defx#do_action('cd', ['..'])
        nnoremap <silent><buffer><expr> j    line('.') == line('$') ? 'gg' : 'j'
        nnoremap <silent><buffer><expr> k    line('.') == 1 ? 'G' : 'k'
        nnoremap <silent><buffer><expr> K    defx#do_action('new_directory')
        nnoremap <silent><buffer><expr> N    defx#do_action('new_file')
        nnoremap <silent><buffer><expr> yy   defx#do_action('yank_path')
    endfunction
'''

[[plugins]]
repo = 'Shougo/unite.vim'
if = "has('vim')"
hook_add = '''
    nnoremap  <Space>B  :Unite bookmark<CR>
    nnoremap  <Space>b  :Unite buffer<CR>
    nnoremap  <Space>r  :Unite file_mru<CR>
'''

#[[plugins]]
#repo = 'Shougo/vimfiler'
#if = "has('vim')"
#depends = 'unite.vim'
#hook_add = '''
#    source ~/.config/nvim/plugins/vimfiler.rc.vim
#
#    autocmd Filetype vimfiler nmap <buffer>  <CR>   <Plug>(vimfiler_expand_or_edit)
#    autocmd Filetype vimfiler nmap <buffer>  l      <Plug>(vimfiler_expand_or_edit)
#    autocmd Filetype vimfiler nmap <buffer>  <C-l>  <Plug>(vimfiler_cd_or_edit)
#    autocmd FileType vimfiler setl nobl
#
#    let g:vimfiler_as_default_explorer = 1
#    let g:vimfiler_tree_opened_icon    = '↩ '
#    let g:vimfiler_tree_closed_icon    = '↪ '
#    let g:vimfiler_tree_leaf_icon      = " "
#
#    let g:vimfiler_file_icon           = '- '
#    let g:vimfiler_marked_file_icon    = '✓ '
#    let g:vimfiler_readonly_file_icon  = '✗ '
#'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]] # color
repo = 'tomasr/molokai'
hook_add = '''
    set background=dark
    au MyAuto VimEnter * nested colorscheme molokai
'''

[[plugins]] # toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]] # elm syntax
repo = 'ElmCast/elm-vim'
on_ft = 'elm'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
    \   'colorscheme': 'wombat'
    \}
'''

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
    autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd   ctermbg=54
    autocmd VimEnter,Colorscheme * :hi IndentGuidesEven  ctermbg=23
    let g:indent_guides_enable_on_vim_startup=1
    let g:indent_guides_guide_size=1
'''

[[plugins]]
repo = 'kassio/neoterm'
if = "has('nvim')"
hook_add = '''
    nnoremap <silent> ,rc :TREPLSendFile<cr>
    nnoremap <silent> ,rl :TREPLSendLine<cr>
    nnoremap <silent> vt  :Ttoggle<cr>
    nnoremap <silent> vs  :terminal<cr>
    vnoremap <silent> ,rl :TREPLSendSelection<cr>
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'justincampbell/vim-eighties'
hook_add = '''
    let g:eighties_enable = 1
    let g:eighties_minimum_width = 110
    let g:eighties_exta_width = 0
    let g:eighties_compute = 1
'''

[[plugins]]
repo = 'LeafCage/yankround.vim'

 [[plugins]]
repo = 'junegunn/vim-emoji'
hook_add = '''
    let g:gitgutter_sign_added = emoji#for('small_blue_diamond')
    let g:gitgutter_sign_modified = emoji#for('small_orange_diamond')
    let g:gitgutter_sign_removed = emoji#for('small_red_triangle')
    let g:gitgutter_sign_modified_removed = emoji#for('collision')
    set completefunc=emoji#complete
'''

[[plugins]]
repo = 'rhysd/github-complete.vim'

[[plugins]]
repo = 'osyo-manga/vim-brightest'

[[plugins]]
repo = 'Lokaltog/vim-easymotion'
hook_add = '''
    let g:EasyMotion_do_mapping = 0
    let g:EasyMotion_enter_jump_first = 1
    let g:EasyMotion_smartcase = 1
    let g:EasyMotion_smartsign_jp = 1
    map  f <Plug>(easymotion-bd-f)
    nmap f <Plug>(easymotion-overwin-f2)
    nmap t <Plug>(easymotion-overwin-f)
    xmap t <Plug>(easymotion-overwin-f)
    omap t <Plug>(easymotion-overwin-f)
    map  / <Plug>(easymotion-sn)
    omap / <Plug>(easymotion-tn)
'''

[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'sheerun/vim-polyglot'

[[plugins]]
repo = 'terryma/vim-expand-region'
hook_add = '''
    vmap v <Plug>(expand_region_expand)
    vmap <C-v> <Plug>(expand_region_shrink)
'''

[[plugins]]
repo = 'junegunn/fzf'
build = './install --bin'
merged = 0

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
hook_add = '''
    nnoremap <silent> ,f :GFiles<CR>
    nnoremap <silent> ,F :GFiles?<CR>
    nnoremap <silent> ,b :Buffers<CR>
    nnoremap <silent> ,l :BLines<CR>
    nnoremap <silent> ,h :History<CR>
    nnoremap <silent> ,m :Mark<CR>
    command! -bang -nargs=* Rgf
    \ call fzf#vim#grep(
    \   'rg --line-number --no-heading '.shellescape(<q-args>), 0,
    \   fzf#vim#with_preview({'options': '--exact --reverse'}, 'right:50%:wrap')
    \ )
    command! -bang -nargs=* Rg
    \ call fzf#vim#grep(
    \   'rg --line-number --no-heading '.shellescape(<q-args>), 0,
    \   fzf#vim#with_preview({'options': '--exact --reverse --delimiter : --nth 3..'}, 'right:50%:wrap'))
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
on_i = 1
merged = '0'
hook_add = '''
    function! s:show_documentation()
        if (index(['vim','help'], &filetype) >= 0)
            execute 'h '.expand('<cword>')
        else
            call CocAction('doHover')
        endif
    endfunction
    inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
    inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
    inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
    nmap <silent> [g <Plug>(coc-diagnostic-prev)
    nmap <silent> ]g <Plug>(coc-diagnostic-next)
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)
    nmap <leader>rn <Plug>(coc-rename)
    nnoremap <silent> K :call <SID>show_documentation()<CR>
'''

