colorscheme elflord
"colorscheme default
set enc=utf-8

set noswapfile
set nobackup
set nowritebackup

set belloff=all

set list
set listchars=tab:≫-,trail:-,extends:≫,precedes:≪,nbsp:%,eol:↓,space:⁻
highlight NonText    ctermbg=NONE ctermfg=59 guibg=NONE guifg=NONE
highlight SpecialKey ctermbg=NONE ctermfg=59 guibg=NONE guifg=NONE


set scrolloff=5
set backspace=indent,eol,start
set softtabstop=4
set shiftwidth=4
set expandtab

set number
set ruler
set cursorcolumn
set cursorline
set relativenumber

set ignorecase
set smartcase

set history=10000
set hlsearch
set incsearch
set wrapscan
set gdefault
set shiftround




nnoremap <SPACE> <NOP>
nnoremap <BS> <NOP>
nnoremap l <NOP>
nnoremap h <NOP>
nnoremap Q <NOP>

function! SetVimrc() abort
    if filereadable( expand('~/.vimrc') )
        :execute ":e ~/.vimrc"
    endif
endfunction

if filereadable( expand('~/.vimrc') )
    nnoremap <SPACE>vt :call SetVimrc()<CR>
    nnoremap <SPACE>vr :source ~/.vimrc<CR>
endif

nnoremap : ;
nnoremap ; :
nnoremap q; q:
nnoremap Y y$

nnoremap s <NOP>
nnoremap sh :split<CR>
nnoremap sv :vsplit<CR>
nnoremap sa <C-w><S-w>
nnoremap sd <C-w>w
nnoremap ss 5<C-w>h

nnoremap <ESC><ESC> :nohlsearch<CR>
nnoremap <SPACE>f :e%:p:h<CR>
nnoremap <SPACE>ls :ls<CR>:buf<SPACE>

inoremap lll <ESC><RIGHT>
inoremap hhh <ESC><LEFT>
inoremap j gj
inoremap k gk
inoremap jj <ESC>
inoremap kk <ESC>
inoremap ｊｊ <ESC>
inoremap ｋｋ <ESC>

inoremap :w<CR> <ESC>:w<CR>
inoremap ;w<CR> <ESC>:w<CR>

tnoremap <ESC><ESC> <C-\><C-n>




let g:my_brackets_pair = {"(":")","[":"]","{":"}", "<":">", "'":"'",'"':'"', "`":"`"}

function! Make_map_trade( b1,b2 ) abort
    return "vi".a:b1."xr".g:my_brackets_pair[a:b2]."<LEFT>r".a:b2."p"
endfunction

function! Setmap_bracket_trade( tgt ) abort
    for k1 in keys( g:my_brackets_pair )
        for k2 in keys( g:my_brackets_pair )
            if k1==k2
                continue
            endif
            execute "nnoremap ".a:tgt.k1.k2." ".Make_map_trade(k1,k2)
        endfor
    endfor
endfunction

function! Make_v_map_wrap( b ) abort
    return "c".a:b.g:my_brackets_pair[a:b]."<ESC>P"
endfunction

function! Make_i_map_wrap( b ) abort
    return a:b.g:my_brackets_pair[a:b]."<LEFT>"
endfunction

function! Make_i_map_wrap_with_space( b ) abort
    return a:b."<SPACE><SPACE>".g:my_brackets_pair[a:b]."<LEFT><LEFT>"
endfunction

function! Make_i_map_quit( b ) abort
    return a:b."<ESC>"
endfunction

function! Make_i_map_do_nothing( b ) abort
    return "<NOP>"
endfunction

function! Setmap_bracket_kind( ) abort
    for k in keys( g:my_brackets_pair )
        execute "vnoremap ".k." ".Make_v_map_wrap(k)
        execute "inoremap ".k." ".Make_i_map_wrap(k)
        execute "inoremap ".k."jj ".Make_i_map_quit(k)
        execute "inoremap ".k."kk ".Make_i_map_quit(k)
        execute "inoremap ".k."<BS> ".Make_i_map_do_nothing(k)
        execute "inoremap ".k.g:my_brackets_pair[k]." ".k.g:my_brackets_pair[k]
    endfor
endfunction

nnoremap S <NOP>
:call Setmap_bracket_trade( "S" )
:call Setmap_bracket_kind()




augroup netrw_mapping
    autocmd!
    autocmd filetype netrw call NetrwMapping()
augroup END

function! NetrwMapping()
    noremap <buffer> sh :split<CR>
    noremap <buffer> sv :vsplit<CR>
    nmap <buffer> h -
    nmap <buffer> l <CR>
endfunction

highlight ColorColumn ctermbg=236 ctermfg=240 guibg=NONE guifg=NONE
augroup changeBG
    autocmd!
    autocmd WinEnter * setlocal wincolor=Normal
    autocmd WinLeave * setlocal wincolor=ColorColumn
augroup END

