: "LINUX" && {
    : "COMMON" && {
        export XDG_CONFIG_HOME="$HOME/.config"
        export PKG_CONFIG_PATH="/usr/bin/pkg-config"
    }
    : "Language" && {
        export LANGUAGE=en_US.UTF-8
        export LC_ALL=en_US.UTF-8
        export LC_CTYPE=en_US.UTF-8
        export LANG=en_US.UTF-8
    }
    : "KEY MAPPING" && {
        which xmodmap > /dev/null && { 
            xmodmap -e 'keycode 100 = Return'
            xmodmap -e 'keycode 101 = Return'
            xmodmap -e 'keycode 102 = BackSpace'
        }
        bindkey '^P' history-beginning-search-backward
        bindkey '^N' history-beginning-search-forward
    }
}

: "ZSH" && {
    : "COMMON" && {
        # comp
        autoload -Uz compinit
        compinit
        autoload -U select-word-style
        select-word-style bash
        # else
        setopt no_beep
        setopt no_flow_control
        set clipboard=unnamed
        alias zsrc="source ~/.zshrc "
        alias zset="nvim ~/.zshrc "
    }
    : "PLUGINS" && {
        export ZPLUG_HOME=$HOME/.zplug
        [ -f "$ZPLUG_HOME/init.zsh" ] && {
            source $HOME/.zplug/init.zsh
            zplug "zsh-users/zsh-completions"
            zplug "junegunn/fzf-bin", as:command, from:gh-r, rename-to:fzf
            zplug "junegunn/fzf", as:command, use:bin/fzf-tmux
            zplug "junegunn/fzf", use:shell/completion.zsh
            zplug "b4b4r07/enhancd", use:init.sh
            # activate
            zplug check || zplug install
            zplug load
            # options
            zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
            zstyle ':completion:*' ignore-parents parent pwd ..  
            zstyle ':completion:*:processes' command 'ps x -o pid,s,args' # upgrade ps-command
        }
    }
    : "CURRDIR_CONTROL" && {
        DIRSTACKSIZE=200
        setopt auto_cd
        setopt auto_pushd
        setopt pushd_ignore_dups
        alias ..="cd .."
        alias cdd="cd - "
    }
    : "HISTORY" && {
        export HISTFILE=${HOME}/.zhistory
        export HISTSIZE=100000
        export SAVEHIST=100000
        setopt hist_ignore_dups
        setopt hist_ignore_all_dups
        setopt extended_history
        setopt hist_reduce_blanks
        setopt share_history
        alias hall="fc -lt '%F %T' 1 "
        alias h="fc -lt '%F %T' -20 "
        alias his="hall | fzf"
    }
    : "PROMPT" && {
        autoload -Uz colors
        colors
        # PROMPT='%F{blue}%n@%m%f %(!.#.$) '
        PROMPT='%F{cyan}%n `branch-status-check` %f%(!.#.$) '
        RPROMPT='[%F{green}%~%f] %*'
        setopt prompt_subst
        setopt transient_rprompt
    }
}

: "PROGRAMMING" && { 
    which python > /dev/null && { 
        export PYENV_ROOT="$HOME/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$(pyenv init -)"
        eval "$(pyenv virtualenv-init -)"
        alias -s py="python "
        alias pyev="pyenv versions "
        alias pyen="pyenv virtualenv "
        alias pyel="pyenv virtualenvs "
        alias pyea="pyenv activate "
        alias pyed="pyenv deactivate "
    }
    which node > /dev/null && { 
        : "NVM" && {
            export NVM_DIR="$HOME/.nvm"
            # This loads nvm
            [ -s "$NVM_DIR/nvm.sh" ] && $NVM_DIR/nvm.sh
            # This loads nvm bash_completion
            [ -s "$NVM_DIR/bash_completion" ] && $NVM_DIR/bash_completion
        }
        : "YARN" && {
            export PATH=~/.yarn/bin:$PATH
        }
    }
    which stack > /dev/null && { 
        export PATH=~/.local/bin:$PATH
        alias -s hs="stack runghc "
        alias stb="stack build "
        alias stn="stack new "
        alias sti="stack ghci "
        function ste(){
            local x=$(basename `pwd`)
            stack build
            stack exec $x-exe
        }
    }
}

########################################  
# 補完機能を有効にする
# fpath=(/usr/local/share/zsh-completions/src $fpath)


# sudo の後ろでコマンド名を補完する  
# zstyle \':completion:*:sudo:*\' command-path /usr/local/sbin /usr/local/bin   
#                    /usr/sbin /usr/bin /sbin /bin /usr/X11R6/bin  



########################################  
# key bind
# bindkey -v
: "ALIASES" && {
    alias cdw="~/ws"
    alias dot="~/git_clones/dotfiles"

    alias upbat="upower -i /org/freedesktop/UPower/devices/battery_BAT0"

    alias ll="ls -lrt --color=auto "
    alias lll="ls -alrt --color=auto "
    alias rm="rm -i "
    alias cp="cp -i "
    alias mv="mv -i "
    alias mkdir="mkdir -p "
    # cd  : cd is alias of pushd. this defined by function.
    alias fg1="fg %1 "
    alias fg2="fg %2 "
    alias fg3="fg %3 "
    alias fg4="fg %4 "
    alias fg5="fg %5 "
    alias bg1="bg %1 "
    alias bg2="bg %2 "
    alias bg3="bg %3 "
    alias bg4="bg %4 "
    alias bg5="bg %5 "

    # nvim
    alias nv="nvim "
    alias nvi="nvim ~/.config/nvim/init.vim"
    alias nvo="nvim ~/.config/nvim/options.rc.vim"
    alias nvk="nvim ~/.config/nvim/keymaps.rc.vim"
    alias nvd="nvim ~/.config/nvim/dein.toml"
    alias nvl="nvim ~/.config/nvim/dein_lazy.toml"
    # git
    # gd  : git diff alias   is made by function.
    # grb : git rebase alias is made by function.
    alias ga="git add "
    alias gb="git branch"
    alias gs="git status"
    alias gco="git checkout "
    alias gcm="git commit -m "
    alias glo="git log --oneline "
    # else
    alias untar="tar -xvf "
    alias psaux="ps -aux | fzf "
    alias oct="octave --no-gui "
}

########################################

# cd is alias of pushd
#function cd {
#  if [ -z "$1" ] ; then
#    test "$PWD" != "$HOME" && pushd $HOME > /dev/null
#  elif ( echo "$1" | egrep "^\.\.\.+$" > /dev/null ) ; then
#    cd $( echo "$1" | perl -ne 'print "../" x ( tr/\./\./ - 1 )' )
#  else
#    pushd "$1" > /dev/null
#  fi
#  ls -ltr --color=auto
#}

# cdの後にlsを実行
function chpwd() {
  ls -ltr --color=auto
}

# mkdirとcdを同時実行
function mc() {
  if [[ -d $1 ]]; then
    echo "$1 already exists!"
    cd $1
  else
    mkdir -p $1 && cd $1
  fi
}

# git rebse alias
function grb(){
    git rebase -i HEAD~$1
}

# git diff alias
function gd(){
    git diff --name-only HEAD HEAD~$1
}

# stack exec

########################################
# {{{ methods for RPROMPT
# fg[color]表記と$reset_colorを使いたい
# @see https://wiki.archlinux.org/index.php/zsh
function branch-status-check {
    local prefix branchname suffix
        # .gitの中だから除外
        if [[ "$PWD" =~ '/\.git(/.*)?$' ]]; then
            return
        fi
        branchname=`get-branch-name`
        # ブランチ名が無いので除外
        if [[ -z $branchname ]]; then
            return
        fi
        prefix=`get-branch-status` #色だけ返ってくる
        suffix='%{'${reset_color}'%}'
        echo ${prefix}${branchname}${suffix}
}
function get-branch-name {
    # gitディレクトリじゃない場合のエラーは捨てます
    echo `git rev-parse --abbrev-ref HEAD 2> /dev/null`
}
function get-branch-status {
    local res color
        output=`git status --short 2> /dev/null`
        if [ -z "$output" ]; then
            res=':' # status Clean
            color='%{'${fg[green]}'%}'
        elif [[ $output =~ "[\n]?\?\? " ]]; then
            res='?:' # Untracked
            color='%{'${fg[yellow]}'%}'
        elif [[ $output =~ "[\n]? M " ]]; then
            res='M:' # Modified
            color='%{'${fg[red]}'%}'
        else
            res='A:' # Added to commit
            color='%{'${fg[cyan]}'%}'
        fi
        # echo ${color}${res}'%{'${reset_color}'%}'
        echo ${color} # 色だけ返す
}
# }}}

